generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// RFC SCIM Core User Schema Attributes: https://datatracker.ietf.org/doc/html/rfc7643#section-8.1interface
// active and externalId are required by Okta: https://developer.okta.com/docs/guides/scim-provisioning-integration-prepare/main/#basic-user-schema
model User {
  id                 String       @id @default(uuid())
  email              String?      @unique()
  password           String?
  name               String
  // Todo       Todo[]
  org                Org?         @relation(fields: [orgId], references: [id])
  orgId              Int?
  externalId         String?
  active             Boolean?
  Team               Team?        @relation(fields: [teamId], references: [id])
  teamId             Int?
  Company            Company?     @relation(fields: [companyId], references: [id])
  companyId          String?
  emailVerified      DateTime?    @map("email_verified")
  image              String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  accounts           Account[]
  sessions           Session[]
  onboardingComplete Boolean      @default(false)
  Invitation         Invitation[]

  @@unique([orgId, externalId])
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @map("user_id")
  type                     String?
  provider                 String
  providerAccountId        String   @map("provider_account_id")
  token_type               String?
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  refresh_token_expires_in Int?
  expires_at               Int?
  scope                    String?
  id_token                 String?  @db.Text
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model Org {
  id                     Int     @id @default(autoincrement())
  domain                 String  @unique
  issuer                 String  @default("")
  authorization_endpoint String  @default("")
  token_endpoint         String  @default("")
  userinfo_endpoint      String  @default("")
  client_id              String  @default("")
  client_secret          String  @default("")
  apikey                 String
  // Todo                   Todo[]
  User                   User[]
  idpType                String?
}

model Team {
  id          Int          @id @default(autoincrement())
  name        String
  teamMembers User[]
  Company     Company?     @relation(fields: [companyId], references: [id])
  companyId   String?
  Invitation  Invitation[]
}

model Company {
  id         String       @id @default(cuid())
  name       String
  members    User[]
  teams      Team[]
  Invitation Invitation[]
}

model Invitation {
  id        Int      @id @default(autoincrement())
  status    String // You can use an enum for status (e.g., "pending", "accepted", "rejected")
  createdAt DateTime @default(now())
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    Int
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
}
